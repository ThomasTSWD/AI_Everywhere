# .github/workflows/release-on-commit.yml
# Allow Read / Write Settings > Actions
# Commit with v.x.x.x

name: Release Electron App on Commit Message
on:
  push:
    branches:
      - main
jobs:
  prepare:
    if: contains(github.event.head_commit.message, 'v')
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.extract_version.outputs.VERSION }}
      repo_name: ${{ steps.get_repo.outputs.REPO_NAME }}
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
    - name: Get repository name
      id: get_repo
      run: echo "REPO_NAME=$(basename $GITHUB_REPOSITORY)" >> $GITHUB_OUTPUT
    - name: Extract version from commit message
      id: extract_version
      run: echo "VERSION=$(echo '${{ github.event.head_commit.message }}' | grep -o 'v[0-9]*\.[0-9]*\.[0-9]*')" >> $GITHUB_OUTPUT

  build-windows:
    needs: prepare
    runs-on: windows-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '22'
    - name: Install dependencies
      run: npm install
    - name: Update package.json version
      run: |
        $VERSION_WITHOUT_V = "${{ needs.prepare.outputs.version }}".TrimStart('v')
        npm version $VERSION_WITHOUT_V --no-git-tag-version
    - name: Build for Windows
      run: npx electron-packager . "${{ needs.prepare.outputs.repo_name }}" --platform=win32 --arch=x64 --overwrite
    - name: Zip Windows build
      run: Compress-Archive -Path "${{ needs.prepare.outputs.repo_name }}-win32-x64" -DestinationPath "${{ needs.prepare.outputs.repo_name }}-Windows-${{ needs.prepare.outputs.version }}.zip"
    - name: Upload Windows artifact
      uses: actions/upload-artifact@v3
      with:
        name: windows-build
        path: ${{ needs.prepare.outputs.repo_name }}-Windows-${{ needs.prepare.outputs.version }}.zip

  build-macos:
    needs: prepare
    runs-on: macos-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '22'
    - name: Install dependencies
      run: npm install
    - name: Update package.json version
      run: |
        VERSION_WITHOUT_V=$(echo ${{ needs.prepare.outputs.version }} | sed 's/^v//')
        npm version $VERSION_WITHOUT_V --no-git-tag-version
    - name: Build for macOS
      run: npx electron-packager . "${{ needs.prepare.outputs.repo_name }}" --platform=darwin --arch=x64 --overwrite
    - name: Zip macOS build
      run: zip -r ${{ needs.prepare.outputs.repo_name }}-macOS-${{ needs.prepare.outputs.version }}.zip "${{ needs.prepare.outputs.repo_name }}-darwin-x64"
    - name: Upload macOS artifact
      uses: actions/upload-artifact@v3
      with:
        name: macos-build
        path: ${{ needs.prepare.outputs.repo_name }}-macOS-${{ needs.prepare.outputs.version }}.zip

  create-release:
    needs: [prepare, build-windows, build-macos]
    runs-on: ubuntu-latest
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v3
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ needs.prepare.outputs.version }}
        release_name: Release ${{ needs.prepare.outputs.version }}
        draft: false
        prerelease: false
    - name: Upload Windows Build
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./windows-build/${{ needs.prepare.outputs.repo_name }}-Windows-${{ needs.prepare.outputs.version }}.zip
        asset_name: ${{ needs.prepare.outputs.repo_name }}-Windows-${{ needs.prepare.outputs.version }}.zip
        asset_content_type: application/zip
    - name: Upload macOS Build
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./macos-build/${{ needs.prepare.outputs.repo_name }}-macOS-${{ needs.prepare.outputs.version }}.zip
        asset_name: ${{ needs.prepare.outputs.repo_name }}-macOS-${{ needs.prepare.outputs.version }}.zip
        asset_content_type: application/zip
